/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g
 *     -                            On : 2010-10-11 13:13:32
 *     -                 for the lexer : SimpleLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "SimpleLexer.h"
/* ----------------------------------------- */


/** String literals used by SimpleLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x2A, 0x5B,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x6E, 0x65, 0x77, 0x70, 0x61, 0x72, 0x6D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x64, 0x69, 0x76,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x6E, 0x69, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x69, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x6E, 0x6F, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x61, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x6C, 0x69, 0x73, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x5F, 0x5F, 0x54, 0x5F, 0x45, 0x4F, 0x46, 0x5F, 0x5F,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pSimpleLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSimpleLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pSimpleLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pSimpleLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mT_NEWLINE    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mWS    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_DIGIT_STRING    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_VEC_beg    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_VEC_end    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_OPEN_BR    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_CLOSE_BR    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_NEWPARAM    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_DIV    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_NIL    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_IF    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_NOT    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_AND    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_OR    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_LIST    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mT_EOF    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mDigit    (pSimpleLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pSimpleLexer ctx);
static void	SimpleLexerFree(pSimpleLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
SimpleLexerFree  (pSimpleLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called SimpleLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pSimpleLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pSimpleLexer SimpleLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return SimpleLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called SimpleLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pSimpleLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pSimpleLexer SimpleLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pSimpleLexer ctx; // Context structure we will build and return

    ctx = (pSimpleLexer) ANTLR3_CALLOC(1, sizeof(SimpleLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in SimpleLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our SimpleLexer interface
     */
    ctx->mT_NEWLINE	= mT_NEWLINE;
    ctx->mWS	= mWS;
    ctx->mT_DIGIT_STRING	= mT_DIGIT_STRING;
    ctx->mT_VEC_beg	= mT_VEC_beg;
    ctx->mT_VEC_end	= mT_VEC_end;
    ctx->mT_OPEN_BR	= mT_OPEN_BR;
    ctx->mT_CLOSE_BR	= mT_CLOSE_BR;
    ctx->mT_NEWPARAM	= mT_NEWPARAM;
    ctx->mT_DIV	= mT_DIV;
    ctx->mT_NIL	= mT_NIL;
    ctx->mT_IF	= mT_IF;
    ctx->mT_NOT	= mT_NOT;
    ctx->mT_AND	= mT_AND;
    ctx->mT_OR	= mT_OR;
    ctx->mT_LIST	= mT_LIST;
    ctx->mT_EOF	= mT_EOF;
    ctx->mDigit	= mDigit;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= SimpleLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 9:3: ( ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NEWLINE
 *
 * Looks to match the characters the constitute the token T_NEWLINE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_NEWLINE(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_NEWLINE;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:9:3: ( ( '\\r' )? '\\n' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:9:6: ( '\\r' )? '\\n'
    {

        // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:9:6: ( '\\r' )?
        {
            int alt1=2;
            switch ( LA(1) ) 
            {
                case '\r':
                	{
                		alt1=1;
                	}
                    break;
            }

            switch (alt1) 
            {
        	case 1:
        	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:9:6: '\\r'
        	    {
        	        MATCHC('\r'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleT_NEWLINEEx;
        	        }


        	    }
        	    break;

            }
        }
        MATCHC('\n'); 
        if  (HASEXCEPTION())
        {
            goto ruleT_NEWLINEEx;
        }

        {
            LEXSTATE->channel = HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_NEWLINEEx; /* Prevent compiler warnings */
    ruleT_NEWLINEEx: ;

}
// $ANTLR end T_NEWLINE

//   Comes from: 12:5: ( ( ' ' | '\\t' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:12:5: ( ( ' ' | '\\t' ) )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:12:8: ( ' ' | '\\t' )
    {
        if ( LA(1) == '\t' || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
            LEXSTATE->channel = HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 16:3: ( ( '-' )? ( ( Digit )+ ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DIGIT_STRING
 *
 * Looks to match the characters the constitute the token T_DIGIT_STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_DIGIT_STRING(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_DIGIT_STRING;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:3: ( ( '-' )? ( ( Digit )+ ) )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:5: ( '-' )? ( ( Digit )+ )
    {

        // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:5: ( '-' )?
        {
            int alt2=2;
            switch ( LA(1) ) 
            {
                case '-':
                	{
                		alt2=1;
                	}
                    break;
            }

            switch (alt2) 
            {
        	case 1:
        	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:5: '-'
        	    {
        	        MATCHC('-'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleT_DIGIT_STRINGEx;
        	        }


        	    }
        	    break;

            }
        }
        // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:9: ( ( Digit )+ )
        // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:11: ( Digit )+
        {
            // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:11: ( Digit )+
            {
                int cnt3=0;

                for (;;)
                {
                    int alt3=2;
            	switch ( LA(1) ) 
            	{
            	case '0':
            	case '1':
            	case '2':
            	case '3':
            	case '4':
            	case '5':
            	case '6':
            	case '7':
            	case '8':
            	case '9':
            		{
            			alt3=1;
            		}
            	    break;

            	}

            	switch (alt3) 
            	{
            	    case 1:
            	        // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:16:11: Digit
            	        {
            	            /* 16:11: Digit */
            	            mDigit(ctx ); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleT_DIGIT_STRINGEx;
            	            }


            	        }
            	        break;

            	    default:
            	    
            		if ( cnt3 >= 1 )
            		{
            		    goto loop3;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleT_DIGIT_STRINGEx;
            	}
            	cnt3++;
                }
                loop3: ;	/* Jump to here if this rule does not match */
            }

        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_DIGIT_STRINGEx; /* Prevent compiler warnings */
    ruleT_DIGIT_STRINGEx: ;

}
// $ANTLR end T_DIGIT_STRING

//   Comes from: 21:3: ( '*[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_VEC_beg
 *
 * Looks to match the characters the constitute the token T_VEC_beg
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_VEC_beg(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_VEC_beg;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:21:3: ( '*[' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:21:4: '*['
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleT_VEC_begEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_VEC_begEx; /* Prevent compiler warnings */
    ruleT_VEC_begEx: ;

}
// $ANTLR end T_VEC_beg

//   Comes from: 24:3: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_VEC_end
 *
 * Looks to match the characters the constitute the token T_VEC_end
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_VEC_end(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_VEC_end;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:24:3: ( ']' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:24:4: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleT_VEC_endEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_VEC_endEx; /* Prevent compiler warnings */
    ruleT_VEC_endEx: ;

}
// $ANTLR end T_VEC_end

//   Comes from: 28:3: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_OPEN_BR
 *
 * Looks to match the characters the constitute the token T_OPEN_BR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_OPEN_BR(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_OPEN_BR;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:28:3: ( '(' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:28:4: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleT_OPEN_BREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_OPEN_BREx; /* Prevent compiler warnings */
    ruleT_OPEN_BREx: ;

}
// $ANTLR end T_OPEN_BR

//   Comes from: 31:3: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_CLOSE_BR
 *
 * Looks to match the characters the constitute the token T_CLOSE_BR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_CLOSE_BR(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_CLOSE_BR;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:31:3: ( ')' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:31:4: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleT_CLOSE_BREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_CLOSE_BREx; /* Prevent compiler warnings */
    ruleT_CLOSE_BREx: ;

}
// $ANTLR end T_CLOSE_BR

//   Comes from: 34:4: ( 'newparm' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NEWPARAM
 *
 * Looks to match the characters the constitute the token T_NEWPARAM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_NEWPARAM(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_NEWPARAM;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:34:4: ( 'newparm' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:34:5: 'newparm'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleT_NEWPARAMEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_NEWPARAMEx; /* Prevent compiler warnings */
    ruleT_NEWPARAMEx: ;

}
// $ANTLR end T_NEWPARAM

//   Comes from: 38:3: ( 'div' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DIV
 *
 * Looks to match the characters the constitute the token T_DIV
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_DIV(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_DIV;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:38:3: ( 'div' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:38:4: 'div'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleT_DIVEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_DIVEx; /* Prevent compiler warnings */
    ruleT_DIVEx: ;

}
// $ANTLR end T_DIV

//   Comes from: 41:4: ( 'nil' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NIL
 *
 * Looks to match the characters the constitute the token T_NIL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_NIL(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_NIL;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:41:4: ( 'nil' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:41:5: 'nil'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleT_NILEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_NILEx; /* Prevent compiler warnings */
    ruleT_NILEx: ;

}
// $ANTLR end T_NIL

//   Comes from: 44:9: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_IF
 *
 * Looks to match the characters the constitute the token T_IF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_IF(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_IF;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:44:9: ( 'if' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:44:10: 'if'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleT_IFEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_IFEx; /* Prevent compiler warnings */
    ruleT_IFEx: ;

}
// $ANTLR end T_IF

//   Comes from: 47:5: ( 'not' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NOT
 *
 * Looks to match the characters the constitute the token T_NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_NOT(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_NOT;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:47:5: ( 'not' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:47:6: 'not'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleT_NOTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_NOTEx; /* Prevent compiler warnings */
    ruleT_NOTEx: ;

}
// $ANTLR end T_NOT

//   Comes from: 50:4: ( 'and' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_AND
 *
 * Looks to match the characters the constitute the token T_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_AND(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_AND;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:50:4: ( 'and' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:50:5: 'and'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleT_ANDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_ANDEx; /* Prevent compiler warnings */
    ruleT_ANDEx: ;

}
// $ANTLR end T_AND

//   Comes from: 53:4: ( 'or' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_OR
 *
 * Looks to match the characters the constitute the token T_OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_OR(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_OR;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:53:4: ( 'or' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:53:5: 'or'
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleT_OREx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_OREx; /* Prevent compiler warnings */
    ruleT_OREx: ;

}
// $ANTLR end T_OR

//   Comes from: 56:4: ( 'list' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_LIST
 *
 * Looks to match the characters the constitute the token T_LIST
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_LIST(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_LIST;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:56:4: ( 'list' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:56:5: 'list'
    {
        MATCHS(lit_9); 
        if  (HASEXCEPTION())
        {
            goto ruleT_LISTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_LISTEx; /* Prevent compiler warnings */
    ruleT_LISTEx: ;

}
// $ANTLR end T_LIST

//   Comes from: 62:7: ( '__T_EOF__' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_EOF
 *
 * Looks to match the characters the constitute the token T_EOF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_EOF(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_EOF;
       
    
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:62:7: ( '__T_EOF__' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:62:9: '__T_EOF__'
    {
        MATCHS(lit_10); 
        if  (HASEXCEPTION())
        {
            goto ruleT_EOFEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_EOFEx; /* Prevent compiler warnings */
    ruleT_EOFEx: ;

}
// $ANTLR end T_EOF

//   Comes from: 67:7: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Digit
 *
 * Looks to match the characters the constitute the token Digit
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDigit(pSimpleLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:67:7: ( '0' .. '9' )
    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:67:9: '0' .. '9'
    {
        MATCHRANGE('0', '9'); 
        if  (HASEXCEPTION())
        {
            goto ruleDigitEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleDigitEx; /* Prevent compiler warnings */
    ruleDigitEx: ;

}
// $ANTLR end Digit

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pSimpleLexer ctx)
{
    {
        //  C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:8: ( T_NEWLINE | WS | T_DIGIT_STRING | T_VEC_beg | T_VEC_end | T_OPEN_BR | T_CLOSE_BR | T_NEWPARAM | T_DIV | T_NIL | T_IF | T_NOT | T_AND | T_OR | T_LIST | T_EOF )
        
        ANTLR3_UINT32 alt4;

        alt4=16;

        switch ( LA(1) ) 
        {
        case '\n':
        case '\r':
        	{
        		alt4=1;
        	}
            break;
        case '\t':
        case ' ':
        	{
        		alt4=2;
        	}
            break;
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt4=3;
        	}
            break;
        case '*':
        	{
        		alt4=4;
        	}
            break;
        case ']':
        	{
        		alt4=5;
        	}
            break;
        case '(':
        	{
        		alt4=6;
        	}
            break;
        case ')':
        	{
        		alt4=7;
        	}
            break;
        case 'n':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				alt4=8;
        			}
        		    break;
        		case 'i':
        			{
        				alt4=10;
        			}
        		    break;
        		case 'o':
        			{
        				alt4=12;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 4;
        		    EXCEPTION->state        = 8;


        		    goto ruleTokensEx;
        		}

        	}
            break;
        case 'd':
        	{
        		alt4=9;
        	}
            break;
        case 'i':
        	{
        		alt4=11;
        	}
            break;
        case 'a':
        	{
        		alt4=13;
        	}
            break;
        case 'o':
        	{
        		alt4=14;
        	}
            break;
        case 'l':
        	{
        		alt4=15;
        	}
            break;
        case '_':
        	{
        		alt4=16;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 4;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;
        }

        switch (alt4) 
        {
    	case 1:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:10: T_NEWLINE
    	    {
    	        /* 1:10: T_NEWLINE */
    	        mT_NEWLINE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:20: WS
    	    {
    	        /* 1:20: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:23: T_DIGIT_STRING
    	    {
    	        /* 1:23: T_DIGIT_STRING */
    	        mT_DIGIT_STRING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:38: T_VEC_beg
    	    {
    	        /* 1:38: T_VEC_beg */
    	        mT_VEC_beg(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:48: T_VEC_end
    	    {
    	        /* 1:48: T_VEC_end */
    	        mT_VEC_end(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:58: T_OPEN_BR
    	    {
    	        /* 1:58: T_OPEN_BR */
    	        mT_OPEN_BR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:68: T_CLOSE_BR
    	    {
    	        /* 1:68: T_CLOSE_BR */
    	        mT_CLOSE_BR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:79: T_NEWPARAM
    	    {
    	        /* 1:79: T_NEWPARAM */
    	        mT_NEWPARAM(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:90: T_DIV
    	    {
    	        /* 1:90: T_DIV */
    	        mT_DIV(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:96: T_NIL
    	    {
    	        /* 1:96: T_NIL */
    	        mT_NIL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:102: T_IF
    	    {
    	        /* 1:102: T_IF */
    	        mT_IF(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:107: T_NOT
    	    {
    	        /* 1:107: T_NOT */
    	        mT_NOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:113: T_AND
    	    {
    	        /* 1:113: T_AND */
    	        mT_AND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:119: T_OR
    	    {
    	        /* 1:119: T_OR */
    	        mT_OR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:124: T_LIST
    	    {
    	        /* 1:124: T_LIST */
    	        mT_LIST(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // C:\\Documents and Settings\\Sergey\\Рабочий стол\\SimpleLexer.g:1:131: T_EOF
    	    {
    	        /* 1:131: T_EOF */
    	        mT_EOF(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
