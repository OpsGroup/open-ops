/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Documents and Settings\\Sergey\\Рабочий стол\\Simple.g
 *     -                            On : 2010-10-11 13:03:22
 *     -                for the parser : SimpleParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser SimpleParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSimpleParser, which is returned from a call to SimpleParserNew().
 *
 * The methods in pSimpleParser are  as follows:
 *
 *  - ComplexCondition*      pSimpleParser->complex_cond(pSimpleParser)
 *  - ExtendedQuast*      pSimpleParser->solution(pSimpleParser)
 *  - std::list <std::list <int>* >*      pSimpleParser->all_vectors(pSimpleParser)
 *  - std::list <int>*      pSimpleParser->digits_line(pSimpleParser)
 *  - std::list<int> *      pSimpleParser->vector(pSimpleParser)
 *  - int*      pSimpleParser->one_digit_string(pSimpleParser)
 *  - void      pSimpleParser->end_of_lines(pSimpleParser)
 *  - void      pSimpleParser->quast_group(pSimpleParser)
 *  - void      pSimpleParser->quast(pSimpleParser)
 *  - void      pSimpleParser->form(pSimpleParser)
 *  - NewParamVector*      pSimpleParser->newparm_group(pSimpleParser)
 *  - NewParamEquation*      pSimpleParser->newparmvector(pSimpleParser)
 *  - ComplexCondition*      pSimpleParser->expr(pSimpleParser)
 *  - ComplexCondition*      pSimpleParser->factor(pSimpleParser)
 *  - ComplexCondition*      pSimpleParser->nest_factor(pSimpleParser)
 *  - ComplexCondition*      pSimpleParser->term(pSimpleParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SimpleParser_H
#define _SimpleParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


  #include <string>
  #include <stdlib.h>
  #include <list>
// #include"ComplexCondition.h"
#include <iostream>
#include "Analysis/LatticeGraph/ComplexCondition.h"
#include "Analysis/LatticeGraph/LatticeGraph.h"
#include "Analysis/LatticeGraph/LinearLib.h"
#include "Analysis/LatticeGraph/ExtendedQuast.h"
#include "Analysis/LatticeGraph/PIP.h"
#include "Analysis/LatticeGraph/ParamPoint.h"
using namespace LatticeGraph;
//using namespace std;

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SimpleParser_Ctx_struct SimpleParser, * pSimpleParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the complex_cond scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  SimpleParser_complex_condPush().
 */
typedef struct  SimpleParser_complex_cond_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct SimpleParser_complex_cond_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ComplexCondition* cc;
    int flag;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    SimpleParser_complex_cond_SCOPE, * pSimpleParser_complex_cond_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the solution scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  SimpleParser_solutionPush().
 */
typedef struct  SimpleParser_solution_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct SimpleParser_solution_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ExtendedQuast* sol;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    SimpleParser_solution_SCOPE, * pSimpleParser_solution_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the expr scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  SimpleParser_exprPush().
 */
typedef struct  SimpleParser_expr_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct SimpleParser_expr_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    std::list<ComplexCondition*>* leaflist;
    std::list<ComplexCondition*>::iterator* it2;
    std::list<ComplexCondition*>::iterator* it1;
    int k;
    ComplexCondition* left;
    ComplexCondition* right;
    ComplexCondition* root;
    bool flag;
    ComplexCondition* ecur;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    SimpleParser_expr_SCOPE, * pSimpleParser_expr_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the term scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  SimpleParser_termPush().
 */
typedef struct  SimpleParser_term_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct SimpleParser_term_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    std::list<ComplexCondition*>* leaflist;
    std::list<ComplexCondition*>::iterator* it2;
    std::list<ComplexCondition*>::iterator* it1;
    int k;
    ComplexCondition* left;
    ComplexCondition* right;
    ComplexCondition* root;
    bool flag;
    bool flag2;
    ComplexCondition* ecur;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    SimpleParser_term_SCOPE, * pSimpleParser_term_SCOPE;

/** Context tracking structure for SimpleParser
 */
struct SimpleParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  complex_cond stack for use by pSimpleParser_complex_condPush()
     *  and pSimpleParser_complex_condPop()
     */
    pANTLR3_STACK pSimpleParser_complex_condStack;
    ANTLR3_UINT32 pSimpleParser_complex_condStack_limit;
    pSimpleParser_complex_cond_SCOPE   (*pSimpleParser_complex_condPush)(struct SimpleParser_Ctx_struct * ctx);
    pSimpleParser_complex_cond_SCOPE   pSimpleParser_complex_condTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  solution stack for use by pSimpleParser_solutionPush()
     *  and pSimpleParser_solutionPop()
     */
    pANTLR3_STACK pSimpleParser_solutionStack;
    ANTLR3_UINT32 pSimpleParser_solutionStack_limit;
    pSimpleParser_solution_SCOPE   (*pSimpleParser_solutionPush)(struct SimpleParser_Ctx_struct * ctx);
    pSimpleParser_solution_SCOPE   pSimpleParser_solutionTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  expr stack for use by pSimpleParser_exprPush()
     *  and pSimpleParser_exprPop()
     */
    pANTLR3_STACK pSimpleParser_exprStack;
    ANTLR3_UINT32 pSimpleParser_exprStack_limit;
    pSimpleParser_expr_SCOPE   (*pSimpleParser_exprPush)(struct SimpleParser_Ctx_struct * ctx);
    pSimpleParser_expr_SCOPE   pSimpleParser_exprTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  term stack for use by pSimpleParser_termPush()
     *  and pSimpleParser_termPop()
     */
    pANTLR3_STACK pSimpleParser_termStack;
    ANTLR3_UINT32 pSimpleParser_termStack_limit;
    pSimpleParser_term_SCOPE   (*pSimpleParser_termPush)(struct SimpleParser_Ctx_struct * ctx);
    pSimpleParser_term_SCOPE   pSimpleParser_termTop;


     ComplexCondition* (*complex_cond)	(struct SimpleParser_Ctx_struct * ctx);
     ExtendedQuast* (*solution)	(struct SimpleParser_Ctx_struct * ctx);
     std::list <std::list <int>* >* (*all_vectors)	(struct SimpleParser_Ctx_struct * ctx);
     std::list <int>* (*digits_line)	(struct SimpleParser_Ctx_struct * ctx);
     std::list<int> * (*vector)	(struct SimpleParser_Ctx_struct * ctx);
     int* (*one_digit_string)	(struct SimpleParser_Ctx_struct * ctx);
     void (*end_of_lines)	(struct SimpleParser_Ctx_struct * ctx);
     void (*quast_group)	(struct SimpleParser_Ctx_struct * ctx, ExtendedQuast* cur);
     void (*quast)	(struct SimpleParser_Ctx_struct * ctx, ExtendedQuast* cur);
     void (*form)	(struct SimpleParser_Ctx_struct * ctx, ExtendedQuast* cur);
     NewParamVector* (*newparm_group)	(struct SimpleParser_Ctx_struct * ctx);
     NewParamEquation* (*newparmvector)	(struct SimpleParser_Ctx_struct * ctx);
     ComplexCondition* (*expr)	(struct SimpleParser_Ctx_struct * ctx, ComplexCondition* cur);
     ComplexCondition* (*factor)	(struct SimpleParser_Ctx_struct * ctx, ComplexCondition* cur);
     ComplexCondition* (*nest_factor)	(struct SimpleParser_Ctx_struct * ctx, ComplexCondition* cur);
     ComplexCondition* (*term)	(struct SimpleParser_Ctx_struct * ctx, ComplexCondition* cur);
     ANTLR3_BOOLEAN (*synpred1_Simple)	(struct SimpleParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_Simple)	(struct SimpleParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct SimpleParser_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSimpleParser SimpleParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pSimpleParser SimpleParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T_NIL      14
#define T_IF      15
#define T_VEC_end      9
#define T_NEWPARAM      12
#define T_EOF      20
#define T_OR      18
#define Digit      6
#define EOF      -1
#define T_AND      17
#define T_CLOSE_BR      11
#define T_OPEN_BR      10
#define T_DIV      13
#define T_LIST      19
#define WS      5
#define T_DIGIT_STRING      7
#define T_VEC_beg      8
#define T_NEWLINE      4
#define T_NOT      16
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SimpleParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
