#include "generated/SimpleParser.h"
#include "generated/SimpleLexer.h"

// Main entry point for this example
//
#include    <antlr3.h>

int ANTLR3_CDECL    main(int argc, char *argv[])
{
    pANTLR3_UINT8	    fName;
    pANTLR3_INPUT_STREAM    input;
    pSimpleLexer		    lxr;
    pANTLR3_COMMON_TOKEN_STREAM	    tstream;
    pSimpleParser				psr;

    char bigBuffer[1000000];
    fflush(stderr);
    setvbuf(stderr,bigBuffer,_IOFBF,1000000);

    if (argc < 2 || argv[1] == NULL)
    {
		fName	=(pANTLR3_UINT8)"input"; // Note in VS2005 debug, working directory must be configured
    }
    else
    {
		fName	= (pANTLR3_UINT8)argv[1];
    }
    input	= antlr3AsciiFileStreamNew(fName);
    if ( input == NULL)
    {
	    fprintf(stderr, "Failed to open file %s\n", (char *)fName);
		exit(1);
	}
    lxr	    = SimpleLexerNew(input);	    // CLexerNew is generated by ANTLR
    if ( lxr == NULL )
    {
	    fprintf(stderr, "Unable to create the lexer due to malloc() failure1\n");
	    exit(1);
    }
	tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
    if (tstream == NULL)
    {
	fprintf(stderr, "Out of memory trying to allocate token stream\n");
	exit(1);
    }
    psr	    = SimpleParserNew(tstream);  // CParserNew is generated by ANTLR3
    if (psr == NULL)
    {
	fprintf(stderr, "Out of memory trying to allocate parser\n");
	exit(ANTLR3_ERR_NOMEM);
    }
//==============================================================================================    
	//LatticeGraph::ComplexCondition* res = psr->complex_cond(psr);
	//delete res;
	//std::cout<<res->toString()<<std::endl;
	LatticeGraph::ExtendedQuast* res=psr->solution(psr);
//==============================================================================================    
	psr	    ->free  (psr);	    psr = NULL;
    tstream ->free  (tstream);	    tstream = NULL;
    lxr	    ->free  (lxr);	    lxr = NULL;
    input   ->close (input);	    input = NULL;

    setbuf(stderr,NULL);

    return 0;
}

